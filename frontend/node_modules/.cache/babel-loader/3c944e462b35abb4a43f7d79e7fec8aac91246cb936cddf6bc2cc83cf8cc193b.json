{"ast":null,"code":"var _jsxFileName = \"C:\\\\desctop folder\\\\ENIAD\\\\2EME ANNEE\\\\S4\\\\IOT\\\\Projet\\\\Parking_intellegent\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { ChakraProvider, Box, Heading, Container, SimpleGrid, useToast } from '@chakra-ui/react';\nimport ParkingSpot from './components/ParkingSpot';\nimport NotificationConfig from './components/NotificationConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [parkingSpots, setParkingSpots] = useState([]);\n  const toast = useToast();\n\n  // Fonction pour gérer les messages WebSocket\n  const handleWebSocketMessage = useCallback(event => {\n    const message = JSON.parse(event.data);\n    switch (message.type) {\n      case 'INITIAL_STATE':\n        setParkingSpots(message.data);\n        break;\n      case 'UPDATE':\n        setParkingSpots(prevSpots => {\n          // Trouver la place actuelle\n          const currentSpot = prevSpots.find(spot => spot.id === message.data.id);\n\n          // Vérifier si l'état a réellement changé\n          if (currentSpot && currentSpot.status === message.data.status) {\n            // Si l'état est le même, mettre à jour uniquement la date\n            return prevSpots.map(spot => spot.id === message.data.id ? {\n              ...spot,\n              lastUpdate: message.data.lastUpdate\n            } : spot);\n          } else {\n            // Si l'état a changé, afficher la notification\n            toast({\n              title: `Place ${message.data.id} mise à jour`,\n              description: `État: ${message.data.status}`,\n              status: message.data.status === 'libre' ? 'success' : 'warning',\n              duration: 3000,\n              isClosable: true\n            });\n\n            // Mettre à jour la place avec le nouvel état\n            return prevSpots.map(spot => spot.id === message.data.id ? message.data : spot);\n          }\n        });\n        break;\n      default:\n        console.log('Message non géré:', message);\n    }\n  }, [toast]);\n\n  // Initialisation de la connexion WebSocket\n  useEffect(() => {\n    const websocket = new WebSocket('ws://localhost:3002');\n    websocket.onopen = () => {\n      console.log('Connecté au serveur WebSocket');\n    };\n    websocket.onmessage = handleWebSocketMessage;\n    websocket.onerror = error => {\n      console.error('Erreur WebSocket:', error);\n    };\n    websocket.onclose = () => {\n      console.log('Déconnecté du serveur WebSocket');\n    };\n\n    // Nettoyage lors du démontage\n    return () => {\n      websocket.close();\n    };\n  }, [handleWebSocketMessage]);\n  return /*#__PURE__*/_jsxDEV(ChakraProvider, {\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      minH: \"100vh\",\n      bg: \"gray.50\",\n      py: 8,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxW: \"container.xl\",\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          textAlign: \"center\",\n          mb: 8,\n          color: \"blue.600\",\n          children: \"Parking Intelligent\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n          columns: {\n            base: 1,\n            md: 2\n          },\n          spacing: 8,\n          children: [/*#__PURE__*/_jsxDEV(Box, {\n            children: [/*#__PURE__*/_jsxDEV(Heading, {\n              as: \"h2\",\n              size: \"lg\",\n              mb: 4,\n              children: \"Places de Parking\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(SimpleGrid, {\n              columns: {\n                base: 2,\n                md: 3\n              },\n              spacing: 4,\n              children: parkingSpots.map(spot => /*#__PURE__*/_jsxDEV(ParkingSpot, {\n                id: spot.id,\n                status: spot.status,\n                lastUpdate: spot.lastUpdate\n              }, spot.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 92,\n                columnNumber: 19\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Box, {\n            children: /*#__PURE__*/_jsxDEV(NotificationConfig, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"D0wHgEk04X1YTxeP2d1L0QvtmNM=\", false, function () {\n  return [useToast];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ChakraProvider","Box","Heading","Container","SimpleGrid","useToast","ParkingSpot","NotificationConfig","jsxDEV","_jsxDEV","App","_s","parkingSpots","setParkingSpots","toast","handleWebSocketMessage","event","message","JSON","parse","data","type","prevSpots","currentSpot","find","spot","id","status","map","lastUpdate","title","description","duration","isClosable","console","log","websocket","WebSocket","onopen","onmessage","onerror","error","onclose","close","children","minH","bg","py","maxW","as","textAlign","mb","color","fileName","_jsxFileName","lineNumber","columnNumber","columns","base","md","spacing","size","_c","$RefreshReg$"],"sources":["C:/desctop folder/ENIAD/2EME ANNEE/S4/IOT/Projet/Parking_intellegent/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { ChakraProvider, Box, Heading, Container, SimpleGrid, useToast } from '@chakra-ui/react';\nimport ParkingSpot from './components/ParkingSpot';\nimport NotificationConfig from './components/NotificationConfig';\n\nfunction App() {\n  const [parkingSpots, setParkingSpots] = useState([]);\n  const toast = useToast();\n\n  // Fonction pour gérer les messages WebSocket\n  const handleWebSocketMessage = useCallback((event) => {\n    const message = JSON.parse(event.data);\n    \n    switch (message.type) {\n      case 'INITIAL_STATE':\n        setParkingSpots(message.data);\n        break;\n      case 'UPDATE':\n        setParkingSpots(prevSpots => {\n          // Trouver la place actuelle\n          const currentSpot = prevSpots.find(spot => spot.id === message.data.id);\n          \n          // Vérifier si l'état a réellement changé\n          if (currentSpot && currentSpot.status === message.data.status) {\n            // Si l'état est le même, mettre à jour uniquement la date\n            return prevSpots.map(spot => \n              spot.id === message.data.id \n                ? { ...spot, lastUpdate: message.data.lastUpdate }\n                : spot\n            );\n          } else {\n            // Si l'état a changé, afficher la notification\n            toast({\n              title: `Place ${message.data.id} mise à jour`,\n              description: `État: ${message.data.status}`,\n              status: message.data.status === 'libre' ? 'success' : 'warning',\n              duration: 3000,\n              isClosable: true,\n            });\n            \n            // Mettre à jour la place avec le nouvel état\n            return prevSpots.map(spot => \n              spot.id === message.data.id ? message.data : spot\n            );\n          }\n        });\n        break;\n      default:\n        console.log('Message non géré:', message);\n    }\n  }, [toast]);\n\n  // Initialisation de la connexion WebSocket\n  useEffect(() => {\n    const websocket = new WebSocket('ws://localhost:3002');\n\n    websocket.onopen = () => {\n      console.log('Connecté au serveur WebSocket');\n    };\n\n    websocket.onmessage = handleWebSocketMessage;\n\n    websocket.onerror = (error) => {\n      console.error('Erreur WebSocket:', error);\n    };\n\n    websocket.onclose = () => {\n      console.log('Déconnecté du serveur WebSocket');\n    };\n\n    // Nettoyage lors du démontage\n    return () => {\n      websocket.close();\n    };\n  }, [handleWebSocketMessage]);\n\n  return (\n    <ChakraProvider>\n      <Box minH=\"100vh\" bg=\"gray.50\" py={8}>\n        <Container maxW=\"container.xl\">\n          <Heading as=\"h1\" textAlign=\"center\" mb={8} color=\"blue.600\">\n            Parking Intelligent\n          </Heading>\n          \n          <SimpleGrid columns={{ base: 1, md: 2 }} spacing={8}>\n            <Box>\n              <Heading as=\"h2\" size=\"lg\" mb={4}>\n                Places de Parking\n              </Heading>\n              <SimpleGrid columns={{ base: 2, md: 3 }} spacing={4}>\n                {parkingSpots.map((spot) => (\n                  <ParkingSpot \n                    key={spot.id} \n                    id={spot.id} \n                    status={spot.status}\n                    lastUpdate={spot.lastUpdate}\n                  />\n                ))}\n              </SimpleGrid>\n            </Box>\n            \n            <Box>\n              <NotificationConfig />\n            </Box>\n          </SimpleGrid>\n        </Container>\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}