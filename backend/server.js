const express = require('express');
const http = require('http');
const WebSocket = require('ws');
const cors = require('cors');
const nodemailer = require('nodemailer');
const axios = require('axios');
const { v4: uuidv4 } = require('uuid');
require('dotenv').config();

const app = express();
const server = http.createServer(app);

// Configuration CORS plus permissive pour WebSocket
app.use(cors({
  origin: '*',
  methods: ['GET', 'POST'],
  allowedHeaders: ['Content-Type']
}));

app.use(express.json());

// Cr√©er le serveur WebSocket sur un port diff√©rent
const WS_PORT = 3002;
const wss = new WebSocket.Server({ 
  port: WS_PORT,
  perMessageDeflate: false,
  clientTracking: true
});

// Configuration de l'email
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// √âtat initial des places de parking
let parkingSpots = [
  { id: 1, status: 'libre', lastUpdate: new Date() },
  { id: 2, status: 'libre', lastUpdate: new Date() },
  { id: 3, status: 'libre', lastUpdate: new Date() },
  { id: 4, status: 'libre', lastUpdate: new Date() },
  { id: 5, status: 'libre', lastUpdate: new Date() },
  { id: 6, status: 'libre', lastUpdate: new Date() }
];

// Map pour stocker les r√©servations actives
const activeReservations = new Map();

// Gestion des connexions WebSocket
wss.on('connection', (ws, req) => {
  console.log('Nouvelle connexion WebSocket depuis:', req.socket.remoteAddress);
  
  // Envoyer l'√©tat initial
  try {
    ws.send(JSON.stringify({
      type: 'INITIAL_STATE',
      data: parkingSpots
    }));
    console.log('√âtat initial envoy√© au client');
  } catch (error) {
    console.error('Erreur lors de l\'envoi de l\'√©tat initial:', error);
  }

  // Gestion des messages du client
  ws.on('message', (message) => {
    try {
      console.log('Message re√ßu:', message.toString());
    } catch (error) {
      console.error('Erreur lors du traitement du message:', error);
    }
  });

  // Gestion des erreurs
  ws.on('error', (error) => {
    console.error('Erreur WebSocket:', error);
  });

  // Gestion de la d√©connexion
  ws.on('close', (code, reason) => {
    console.log('Client d√©connect√©. Code:', code, 'Raison:', reason);
  });
});

// Gestion des erreurs du serveur WebSocket
wss.on('error', (error) => {
  console.error('Erreur du serveur WebSocket:', error);
});

// Fonction pour diffuser les mises √† jour √† tous les clients connect√©s
function broadcastUpdate(spot) {
  wss.clients.forEach((client) => {
    if (client.readyState === WebSocket.OPEN) {
      try {
        client.send(JSON.stringify({
          type: 'UPDATE',
          data: spot
        }));
      } catch (error) {
        console.error('Erreur lors de la diffusion de la mise √† jour:', error);
      }
    }
  });
}

// Route pour obtenir l'√©tat initial des places
app.get('/api/parking-spots', (req, res) => {
  res.json(parkingSpots);
});

// Route pour mettre √† jour l'√©tat d'une place
app.post('/api/update-spot', async (req, res) => {
  const { id, status } = req.body;
  
  const spotIndex = parkingSpots.findIndex(spot => spot.id === id);
  if (spotIndex !== -1) {
    parkingSpots[spotIndex] = {
      ...parkingSpots[spotIndex],
      status,
      lastUpdate: new Date()
    };

    // Diffuser la mise √† jour √† tous les clients WebSocket
    broadcastUpdate(parkingSpots[spotIndex]);

    res.json(parkingSpots[spotIndex]);
  } else {
    res.status(404).json({ error: 'Place non trouv√©e' });
  }
});

// Route pour mettre √† jour l'√©tat d'une place (utilis√©e par l'ESP32)
app.post('/api/parking-spots/:id/status', (req, res) => {
  const { id } = req.params;
  const { status, distance } = req.body;
  
  const spot = parkingSpots.find(spot => spot.id === parseInt(id));
  if (spot) {
    //start modification de claude
    // V√©rifier si la place est r√©serv√©e
    if (activeReservations.has(parseInt(id))) {
      console.log(`Place ${id} est r√©serv√©e, mise √† jour ignor√©e`);
      return res.json({ 
        success: true, 
        message: 'Place r√©serv√©e, mise √† jour ignor√©e',
        status: 'r√©serv√©',
        spot 
      });
    }
    //end modification de claude

    // D√©terminer le statut en fonction de la distance
    let newStatus = status;
    if (distance !== undefined) {
      // Si la distance est inf√©rieure √† 20 cm, la place est occup√©e
      newStatus = distance < 20 ? 'occup√©' : 'libre';
    }

    spot.status = newStatus;
    spot.lastUpdate = new Date();
    
    // Si la place est occup√©e, envoyer un email
    if (newStatus === 'occup√©') {
      transporter.sendMail({
        from: 'arbibm55@gmail.com',
        to: 'arbibm66@gmail.com',
        subject: 'üö® Alerte : Place de parking occup√©e',
        text: `Une voiture occupe la place de parking ${id}.\nDistance d√©tect√©e : ${distance} cm.`
      }).catch(error => {
        console.error('Erreur lors de l\'envoi de l\'email:', error);
      });
    }
    
    // Diffuser la mise √† jour √† tous les clients connect√©s
    broadcastUpdate(spot);
    
    res.json({ success: true, spot });
  } else {
    res.status(404).json({ success: false, message: 'Place non trouv√©e' });
  }
});

// Route pour envoyer une notification par email
app.post('/api/send-notification', async (req, res) => {
  const { email, message } = req.body;
  
  try {
    await transporter.sendMail({
      from: 'arbibm55@gmail.com',
      to: email,
      subject: 'Notification Parking Intelligent',
      text: message
    });
    
    res.json({ message: 'Notification envoy√©e avec succ√®s' });
  } catch (error) {
    console.error('Erreur lors de l\'envoi de l\'email:', error);
    res.status(500).json({ error: 'Erreur lors de l\'envoi de la notification' });
  }
});

// Route pour r√©server une place
app.post('/api/reserve-spot', async (req, res) => {
  const { id } = req.body;
  
  try {
    const spot = parkingSpots.find(spot => spot.id === parseInt(id));
    
    if (!spot) {
      return res.status(404).json({ error: 'Place non trouv√©e' });
    }
    
    if (spot.status !== 'libre') {
      return res.status(400).json({ error: 'La place n\'est pas disponible' });
    }
    
    if (activeReservations.has(id)) {
      return res.status(400).json({ error: 'La place est d√©j√† r√©serv√©e' });
    }
    
    // Mettre √† jour le statut de la place
    spot.status = 'r√©serv√©';
    spot.lastUpdate = new Date();
    
    // Enregistrer la r√©servation
    activeReservations.set(id, {
      timestamp: new Date(),
      expiresAt: new Date(Date.now() + 30 * 60 * 1000) // Expire apr√®s 30 minutes
    });
    

    // Forcer une mise √† jour imm√©diate vers l'ESP32
    try {
      // On peut envoyer une notification fictive √† l'ESP sp√©cifique
      // Cette partie n'est pas n√©cessaire si votre ESP32 interroge r√©guli√®rement le serveur
      console.log(`Mise √† jour imm√©diate pour ESP32 - Place ${id} r√©serv√©e`);
    } catch (err) {
      console.error("Erreur lors de la notification ESP32:", err);
    }

    
    // Diffuser la mise √† jour
    broadcastUpdate(spot);
    
    res.json({ 
      success: true, 
      message: 'Place r√©serv√©e avec succ√®s',
      spot 
    });
    
  } catch (error) {
    console.error('Erreur lors de la r√©servation:', error);
    res.status(500).json({ error: 'Erreur lors de la r√©servation' });
  }
});

// Route pour annuler une r√©servation
app.post('/api/cancel-reservation', async (req, res) => {
  const { id } = req.body;
  
  try {
    const spot = parkingSpots.find(spot => spot.id === parseInt(id));
    
    if (!spot) {
      return res.status(404).json({ error: 'Place non trouv√©e' });
    }
    
    if (!activeReservations.has(id)) {
      return res.status(400).json({ error: 'Aucune r√©servation active pour cette place' });
    }
    
    // Mettre √† jour le statut de la place
    spot.status = 'libre';
    spot.lastUpdate = new Date();
    
    // Supprimer la r√©servation
    activeReservations.delete(id);
    
    // Diffuser la mise √† jour
    broadcastUpdate(spot);
    
    res.json({ 
      success: true, 
      message: 'R√©servation annul√©e avec succ√®s',
      spot 
    });
    
  } catch (error) {
    console.error('Erreur lors de l\'annulation:', error);
    res.status(500).json({ error: 'Erreur lors de l\'annulation' });
  }
});

// Nettoyage p√©riodique des r√©servations expir√©es
setInterval(() => {
  const now = new Date();
  for (const [id, reservation] of activeReservations.entries()) {
    if (now > reservation.expiresAt) {
      const spot = parkingSpots.find(spot => spot.id === parseInt(id));
      if (spot) {
        spot.status = 'libre';
        spot.lastUpdate = new Date();
        broadcastUpdate(spot);
      }
      activeReservations.delete(id);
    }
  }
}, 60000); // V√©rifie toutes les minutes

const PORT = process.env.PORT || 3001;

// D√©marrer le serveur HTTP
server.listen(PORT, '0.0.0.0', () => {
  console.log(`Serveur HTTP d√©marr√© sur le port ${PORT}`);
  console.log(`Serveur WebSocket d√©marr√© sur le port ${WS_PORT}`);
});